<?php

/**
 * @file
 * Contains dyniva_core.module.
 */

include_once 'dyniva_core.inc';

use Drupal\field\Entity\FieldConfig;
use Drupal\dyniva_core\CcmsCoreEntityModerateAccess;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Url;
use Drupal\Core\Form\FormStateInterface;
use Drupal\dyniva_core\Form\CcmsMenuForm;
use Drupal\Core\TypedData\TranslatableInterface;
use Drupal\Core\Language\LanguageInterface;
use Symfony\Component\Routing\Exception\RouteNotFoundException;
use Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant;
use Drupal\Core\Render\Element;
use Drupal\user\Entity\User;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\node\NodeInterface;
use Drupal\lightning_media\MediaHelper;
use Drupal\dyniva_core\TransliterationHelper;
use Drupal\node\Entity\Node;
use Drupal\menu_link_content\Entity\MenuLinkContent;

/**
 * Implements hook_help().
 */
function dyniva_core_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the dyniva_core module.
    case 'help.page.dyniva_core':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('CCMS Core') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function dyniva_core_theme() {
  return [
    'dyniva_admin' => [
      'template' => 'dyniva_admin',
      'render element' => 'children',
    ],
    'cas_login' => [
      'template' => 'block/block--caslogin',
      'variables' => [
        'configure' => [],
      ],
    ],
    'dyniva_core_user_info' => [
      'variables' => [
        'variables' => NULL,
      ],
    ],
    'dyniva_core_revisions' => [
      'template' => 'dyniva-core-revisions',
      'path' => drupal_get_path('module', 'dyniva_core') . '/templates',
      'variables' => ['items' => array()],
    ],
  ];
}

/**
 * Implements hook_preprocess().
 */
function dyniva_core_preprocess_dyniva_core_user_info(&$variables) {
  // Really need load?
  $user = user_load(\Drupal::currentUser()->id());

  $variables['user_info'] = [
    'user_name' => $user->getDisplayName(),
    'user_mail' => $user->mail->value,
  ];
}

/**
 * Implements hook_entity_type_alter().
 */
function dyniva_core_entity_type_alter(array &$entity_types) {

  if (isset($entity_types['menu'])) {
    $entity_types['menu']->setFormClass('edit', CcmsMenuForm::class);
  }
  if (isset($entity_types['user'])) {
    $entity_types['user']->setFormClass('delete', $entity_types['user']->getFormClass('cancel'));
  }
}

/**
 * Provide a form-specific alteration instead of the global hook_form_alter().
 *
 * @see hook_form_alter()
 * @see hook_form_BASE_FORM_ID_alter()
 * @see \Drupal\Core\Form\FormBuilderInterface::prepareForm()
 */
function dyniva_core_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  if (preg_match('/^block_content_(.*)_panels_ipe_form$/', $form_id)) {
    if ($form_state->getFormObject()->getEntity()->isNew()) {
      $form['info']['widget'][0]['value']['#default_value'] = $form_state->getFormObject()->getEntity()->type->entity->label();
    }
  }
  if (strpos($form_id, 'entity_browser_') === 0) {
    $form['#attached']['library'][] = 'lightning_media/browser.styling';
  }
  if (is_array($form['#theme']) && in_array('node_form', $form['#theme'])) {
    $form_object = $form_state->getFormObject();
    if (method_exists($form_object, 'getEntity')) {
      $node = $form_object->getEntity();
      $type_description = $node->type->entity->getHelp();
      if (!empty($type_description)) {
        $form['type_description'] = [
          '#markup' => $type_description,
        ];
      }
    }
  }
  if ($form_id == 'system_site_maintenance_mode') {
    $form['dyniva_core_maintenance_mode'] = [
      '#type' => 'checkbox',
      '#title' => t('Only put ccms manage path into maintenance mode'),
      '#default_value' => \Drupal::state()->get('dyniva_core.maintenance_mode'),
    ];
    $form['#submit'][] = '_dyniva_core_system_site_maintenance_mode_form_submit';
  }

  if (preg_match('/^node_(.*)_form$/', $form_id) && method_exists($form_state->getFormObject(), 'getEntity') && $form_state->getFormObject()->getEntity() instanceof NodeInterface) {
    // Preview.
    if (!empty($form['actions']['preview'])) {
      $form['#attached']['library'][] = 'dyniva_core/preview';
    }
    // Validate.
    if (!empty($form['#validate'])) {
      $form['#validate'][] = 'dyniva_core_node_form_validate';
    }
  }
  if ($form_id == 'node_preview_form_select') {
    if (isset($form['backlink'])) {
      unset($form['backlink']);
    }
  }
  if (isset($form['field_meta_tags'])) {
    $form['field_meta_tags']['widget'][0]['#weight'] = $form['field_meta_tags']['#weight'];
  }
  if (isset($form['path'])) {
    $form['path']['widget'][0]['#weight'] = $form['path']['#weight'];
  }
  if (isset($form['promote']['#weight'])) {
    $form['options']['#weight'] = $form['promote']['#weight'];
  }
  if (isset($form['uid']['#weight'])) {
    $form['author']['#weight'] = $form['uid']['#weight'];
  }
  if ($form_id == 'menu_edit_form') {
    foreach (Element::children($form['links']['links']) as $lid){
      if(isset($form['links']['links'][$lid]['operations']['#links']['translate'])) {
        $form['links']['links'][$lid]['operations']['#links']['translate']['attributes'] = ['target' => '_blank'];
      }
    }
  }
  if ($form_id == 'editor_image_dialog') {
    $image_element = $form_state->get('image_element') ?: [];
    $form['attributes']['width'] = [
      '#title' => t('Width'),
      '#type' => 'number',
      '#default_value' => $image_element['width'],
      '#attributes' => ['placeholder' => t('Reset image width')]
    ];
    $form['attributes']['height'] = [
      '#title' => t('Height'),
      '#type' => 'number',
      '#default_value' => $image_element['height'],
      '#attributes' => ['placeholder' => t('Reset image height')]
    ];
  }
  if ($form_id == 'entity_embed_dialog' && $form_state->get('entity')) {
    $image_element = $form_state->get('entity_element') ?: [];
    $entity = $form_state->get('entity');

    $form['attributes']['width'] = [
      '#title' => t('Width'),
      '#type' => 'number',
      '#default_value' => $image_element['width']?$image_element['width']:$entity->image->width,
      '#attributes' => ['placeholder' => t('Reset image width')]
    ];
    $form['attributes']['height'] = [
      '#title' => t('Height'),
      '#type' => 'number',
      '#default_value' => $image_element['height']?$image_element['height']:$entity->image->height,
      '#attributes' => ['placeholder' => t('Reset image height')]
    ];
  }

  if(strpos($form_id, 'block_content_') === 0 && !empty($form['info']['widget'][0]['value'])) {
    // 修复block content新增vid内容，不会自动更新到前台的问题
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' &&
          isset($form['actions'][$action]['#type'])&&
          $form['actions'][$action]['#type'] === 'submit'&&
          !empty($form['actions'][$action]['#submit'])) {
        $form['actions'][$action]['#submit'][] = '_dyniva_core_block_content_form_submit';
        break;
      }
    }
  }
}

/**
 * Form submit.
 *
 * @param array $form
 *   Form object.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state objcet.
 */
function _dyniva_core_system_site_maintenance_mode_form_submit(array $form, FormStateInterface $form_state) {
  \Drupal::state()->set('dyniva_core.maintenance_mode', $form_state->getValue('dyniva_core_maintenance_mode'));
}

/**
 * Perform alterations before an entity form is included in the IEF widget.
 *
 * @param array $entity_form
 *   Array of form elements that comprise the entity form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state of the parent form.
 */
function dyniva_core_inline_entity_form_entity_form_alter(array &$entity_form, FormStateInterface &$form_state) {
  if ($entity_form['#entity_type'] == 'media') {
    $account = user_load(\Drupal::currentUser()->id());
    if (!empty($account->department->target_id)) {
      $entity_form['department']['widget']['#default_value'] = $account->department->target_id;
      $entity_form['department']['#access'] = FALSE;
    }
    if (!empty($entity_form['#default_value']) && \Drupal::moduleHandler()->moduleExists('lightning_media')) {
      $media = $entity_form['#default_value'];
      $file = MediaHelper::getSourceField($media);
      if ($file->count() > 0 && !empty($file->get(0)->entity) && empty($entity_form['name']['widget'][0]['value']['#default_value'])) {
        $file_name = $file->get(0)->entity->getFileName();
        if ($pos = mb_strpos($file_name, '.')) {
          $file_name = mb_substr($file_name, 0, $pos);
        }
        $entity_form['name']['widget'][0]['value']['#default_value'] = $file_name;
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function dyniva_core_form_taxonomy_overview_terms_alter(&$form, FormStateInterface $form_state) {
  unset($form['terms']['#empty']);

  unset($form['actions']['reset_alphabetical']);

  $vocabulary = $form_state->get([
    'taxonomy',
    'vocabulary',
  ]);

  foreach (Element::children($form['terms']) as $key) {
    $term = $form['terms'][$key]['#term'];
    if ($term && $managedEntity = dyniva_core_get_entity_managed_entity($term)) {
      $url = Url::fromUserInput("/manage/{$managedEntity->getPath()}/{$term->id()}/edit", [
        'query' => [
          'destination' => Url::fromUserInput("/manage/{$managedEntity->getPath()}")->toString(),
        ],
      ]);
      $access = \Drupal::accessManager()->checkNamedRoute($url->getRouteName(), $url->getRouteParameters());
      if ($access && isset($form['terms'][$key]['operations']['#links']['edit'])) {
        $form['terms'][$key]['operations']['#links']['edit']['url'] = $url;
      }
      else {
        unset($form['terms'][$key]['operations']['#links']['edit']);
      }
      $url = Url::fromUserInput("/manage/{$managedEntity->getPath()}/{$term->id()}/delete", [
        'query' => [
          'destination' => Url::fromUserInput("/manage/{$managedEntity->getPath()}")->toString(),
        ],
      ]);
      $access = \Drupal::accessManager()->checkNamedRoute($url->getRouteName(), $url->getRouteParameters());
      if ($access && isset($form['terms'][$key]['operations']['#links']['delete'])) {
        $form['terms'][$key]['operations']['#links']['delete']['url'] = $url;
      }
      else {
        unset($form['terms'][$key]['operations']['#links']['delete']);
      }

      if (!\Drupal::currentUser()->hasPermission("manage ccms {$managedEntity->id()} settings")) {
        $form['actions']['#access'] = FALSE;
      }
    }
    $form['terms'][$key]['operations']['#weight'] = 10;

  }

}

/**
 * Implements hook_entity_operation_alter().
 */
function dyniva_core_entity_operation_alter(&$operations, EntityInterface $entity) {

  $current_path = \Drupal::service('path.current')->getPath();
  if(!preg_match('#^/manage/#', $current_path)) return ;
  /*
   * @var \Drupal\dyniva_core\Plugin\ManagedEntityPluginManager $pluginManager
   */
  $pluginManager = \Drupal::service('plugin.manager.managed_entity_plugin');
  $moderateAccess = new CcmsCoreEntityModerateAccess();
  $plugins = $pluginManager->getDefinitions();

  $language = \Drupal::languageManager()->getCurrentLanguage(LanguageInterface::TYPE_CONTENT);
  if ($entity instanceof TranslatableInterface){
    $language = $entity->language();
    if($translation = TransliterationHelper::getLatestTranslationAffectedRevision($entity, $language->getId())){
      $entity = \Drupal::entityManager()->getTranslationFromContext($translation, $language->getId(), ['operation' => 'entity_upcast']);
    }
  }

  if ($managedEntity = dyniva_core_get_entity_managed_entity($entity)) {
    $weight = 0;
    unset($operations['translate']);

    $url = Url::fromRoute("dyniva_core.managed_entity.{$managedEntity->id()}.edit_page", [
      'managed_entity_id' => $entity->id(),
    ], [
      'language' => $language,
    ]);
    $access = $moderateAccess->entityAccess($managedEntity, $entity, 'edit')->isAllowed();
    if ($access) {
      $operations['edit'] = [
        'title' => t('Edit'),
        'url' => $url,
        'weight' => $weight++,
      ];
    }
    else {
      unset($operations['edit']);
    }
    $url = Url::fromRoute("dyniva_core.managed_entity.{$managedEntity->id()}.delete_page", [
      'managed_entity_id' => $entity->id(),
    ], [
      'language' => $language,
    ]);
    $access = $moderateAccess->entityAccess($managedEntity, $entity, 'delete')->isAllowed();
    if ($access) {
      $operations['delete'] = [
        'title' => t('Delete'),
        'url' => $url,
        'weight' => $weight++,
      ];
    }
    else {
      unset($operations['delete']);
    }

    $account = \Drupal::currentUser();
    foreach ($plugins as $p) {
      if ($pluginManager->isPluginEnable($managedEntity, $p['id'])) {
        if ($p['id'] == 'moderation' && $managedEntity->getManagedEntityType() == 'node') {
          $url = Url::fromRoute("dyniva_core.managed_entity.{$managedEntity->id()}.publish_page", [
            'managed_entity_id' => $entity->id(),
          ], [
            'language' => $language,
          ]);
          $access = $account->hasPermission("manage ccms {$managedEntity->id()} moderation");
          if ($access) {
            $action = 'Publish';
            if (!empty($entity->status->value)) {
              $action = 'Unpublish';
            }
            $operations['publish'] = [
              'title' => t($action),
              'url' => $url,
              'weight' => $weight++,
            ];
          }
        }
        $instance = $pluginManager->createInstance($p['id']);
        $instance->applyOperationLinks($managedEntity, $entity, $operations);
      }
    }

    if (isset($entity->_deleted) && $entity->_deleted->value) {
      $operations = [];
      $url = Url::fromRoute('workspace_ccms.restore.form', [
        'entity_type_id' => $managedEntity->get('entity_type'),
        'entity_id' => $entity->id(),
      ], [
        'language' => $language,
      ]);
      $access = \Drupal::accessManager()->checkNamedRoute($url->getRouteName(), $url->getRouteParameters());
      if ($access) {
        $operations['restore'] = [
          'title' => t('Restore'),
          'url' => $url,
          'weight' => $weight++,
        ];
      }
      $url = Url::fromRoute('workspace_ccms.purge.form', [
        'entity_type_id' => $managedEntity->get('entity_type'),
        'entity_id' => $entity->id(),
      ], [
        'language' => $language,
      ]);
      $access = \Drupal::accessManager()->checkNamedRoute($url->getRouteName(), $url->getRouteParameters());
      if ($access) {
        $operations['delete'] = [
          'title' => t('Purge'),
          'url' => $url,
          'weight' => $weight++,
        ];
      }
    }
  }
}

/**
 * Implements hook_dyniva_core_managed_entity_plugin_info_alter().
 */
function dyniva_core_dyniva_core_managed_entity_plugin_info_alter(array &$plugins) {
  uasort($plugins, '\Drupal\Component\Utility\SortArray::sortByWeightElement');
}

/**
 * Get managed entity by entity.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity.
 *
 * @return ManagedEntity
 *   Then managed entity get by entity.
 */
function dyniva_core_get_entity_managed_entity(EntityInterface $entity) {
  $cache = &drupal_static(__FUNCTION__, []);
  if (isset($cache[$entity->getEntityTypeId()][$entity->bundle()])) {
    return $cache[$entity->getEntityTypeId()][$entity->bundle()];
  }
  if (isset($cache[$entity->getEntityTypeId()]['und'])) {
    return $cache[$entity->getEntityTypeId()]['und'];
  }
  $conditions = [
    'entity_type' => $entity->getEntityType()->id(),
    'bundle' => $entity->bundle(),
  ];
  $managedEntity = FALSE;
  $managedEntitys = \Drupal::entityTypeManager()->getStorage('managed_entity')->loadByProperties($conditions);
  if (!empty($managedEntitys)) {
    $managedEntity = reset($managedEntitys);
    $cache[$entity->getEntityTypeId()][$entity->bundle()] = $managedEntity;
  }
  if (empty($managedEntity)) {
    $conditions = [
      'entity_type' => $entity->getEntityType()->id(),
      'bundle' => 'und',
    ];
    $managedEntity = FALSE;
    $managedEntitys = \Drupal::entityTypeManager()->getStorage('managed_entity')->loadByProperties($conditions);
    if (!empty($managedEntitys)) {
      $managedEntity = reset($managedEntitys);
      $cache[$entity->getEntityTypeId()]['und'] = $managedEntity;
    }
  }
  return $managedEntity;
}

/**
 * Implements hook_entity_base_field_info_alter().
 */
function dyniva_core_entity_base_field_info_alter(array &$fields, EntityTypeInterface $entity_type) {
  if ($entity_type->id() == 'block_content') {
    $fields['info']->setConstraints([]);
  }
}

/**
 * Implements hook_panels_storage_info_alter().
 */
function dyniva_core_panels_storage_info_alter(array &$storages) {
  if (isset($storages['panelizer_field'])) {
    $storages['panelizer_field']['class'] = 'Drupal\dyniva_core\Plugin\PanelsStorage\PanelizerFieldPanelsStorage';
  }
}

/**
 * Implements hook_menu_links_discovered_alter().
 */
function dyniva_core_menu_links_discovered_alter(&$links) {
  $route_provider = \Drupal::service('router.route_provider');
  foreach ($links as $key => $item) {
    if (!empty($item['route_name'])) {
      try {
        $route = $route_provider->getRouteByName($item['route_name']);
      }
      catch (RouteNotFoundException $e) {
        unset($links[$key]);
      }
    }
  }
}

/**
 * Implements hook_panels_build_alter().
 */
function dyniva_core_panels_build_alter(&$build, PanelsDisplayVariant $panels_display) {
  if (\Drupal::moduleHandler()->moduleExists('statistics')) {
    $context = $panels_display->getContexts();
    if (!empty($context['@panelizer.entity_context:entity'])) {
      /** @var \Drupal\Core\Entity\EntityInterface $entity */
      $entity = $context['@panelizer.entity_context:entity']->getContextValue();
      if ($entity->getEntityTypeId() == 'node') {
        if (!$entity->isNew() && node_is_page($entity) && empty($entity->in_preview)) {
          $build['#attached']['library'][] = 'statistics/drupal.statistics';
          $settings = [
            'data' => [
              'nid' => $entity->id(),
            ],
            'url' => Url::fromUri('base:' . drupal_get_path('module', 'statistics') . '/statistics.php')->toString(),
          ];
          $build['#attached']['drupalSettings']['statistics'] = $settings;
        }
      }
    }
  }
}

/**
 * Implements hook_node_access().
 */
function dyniva_node_access(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Session\AccountInterface $account) {

  if(isset($entity->_deleted) && $entity->_deleted->value) {
    return \Drupal\Core\Access\AccessResult::forbidden();
  }

  // No opinion.
  return \Drupal\Core\Access\AccessResult::neutral();
}

/**
 * Get user picture info.
 *
 * @param \Drupal\user\Entity\User $user
 *   The user entity.
 */
function dyniva_core_get_user_picture(User $user) {
  $picture = [
    'picture' => FALSE,
    'alt' => '',
    'title' => '',
  ];

  if ($user->user_picture && !$user->user_picture->isEmpty()) {
    $picture['picture'] = $user->user_picture->first()->get('entity')->getTarget()->getValue()->url();
    $pic_info = $user->user_picture->first()->get('entity')->getParent()->getValue();
    $picture['alt'] = $pic_info['alt'] ? $pic_info['alt'] : '';
    $picture['title'] = $pic_info['title'] ? $pic_info['title'] : '';
  }
  else {
    // Get default picture.
    $field = FieldConfig::loadByName('user', 'user', 'user_picture');
    // @TODO dont use default_image, as it's not good in features
    if ($field) {
      $default_image = $field->getSetting('default_image');
      $picture['alt'] = $field->getSetting('alt_field') ? $default_image['alt'] : '';
      $picture['title'] = $field->getSetting('title_field') ? $default_image['title'] : '';
      $file = empty($default_image['uuid']) ? FALSE : \Drupal::entityManager()->loadEntityByUuid('file', $default_image['uuid']);
      $picture['picture'] = $file ? file_create_url($file->getFileUri()) : FALSE;
    }
  }

  if (empty($picture['picture'])) {
    $picture['picture'] = file_create_url(drupal_get_path('module', 'dyniva_core') . '/img/user_default.png');
  }
  return $picture;
}

/**
 * Disable all jsonapi resource.
 */
function _dyniva_core_json_api_disable_all() {
  $entity_types = \Drupal::entityTypeManager()->getDefinitions();
  $config_storage = \Drupal::entityTypeManager()->getStorage('jsonapi_resource_config');
  foreach ($entity_types as $entity_type_id => $entity_type) {
    $bundle_type = $entity_type->getBundleEntityType();
    if ($bundle_type) {
      $bundles = \Drupal::entityTypeManager()->getStorage($bundle_type)->loadMultiple();
      foreach ($bundles as $bundle_id => $bundle) {
        $resource_id = "{$entity_type_id}--{$bundle_id}";
        $resource = $config_storage->load($resource_id);
        if (empty($resource)) {
          $resource = $config_storage->create([
            'id' => $resource_id,
            'path' => "{$entity_type_id}/{$bundle_id}",
            'resourceType' => $resource_id,
          ]);
        }
        $resource->disabled = TRUE;
        $resource->save();
      }
    }
    else {
      $resource_id = "{$entity_type_id}--{$entity_type_id}";
      $resource = $config_storage->load($resource_id);
      if (empty($resource)) {
        $resource = $config_storage->create([
          'id' => $resource_id,
          'path' => "{$entity_type_id}/{$entity_type_id}",
          'resourceType' => $resource_id,
        ]);
      }
      $resource->disabled = TRUE;
      $resource->save();
    }
  }
}

/**
 * Implements hook_contextual_links_view_alter().
 */
function dyniva_core_contextual_links_view_alter(&$element, $items) {
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  if (!in_array($theme, [
    'dyniva_admin',
    'seven',
  ])) {
    $element = [];
  }
}

/**
 * Implements hook_editor_js_settings_alter().
 */
function dyniva_core_editor_js_settings_alter(array &$settings) {
  foreach ($settings['editor']['formats'] as $format => &$setting) {
    $setting['editorSettings']['pasteFromWordNumberedHeadingToList'] = TRUE;
    $setting['editorSettings']['pasteFromWordRemoveStyles'] = TRUE;
    $setting['editorSettings']['pasteFromWordRemoveFontStyles'] = TRUE;

    $config = \Drupal::configFactory()->getEditable('dyniva_core.site_info_config');
    if (!empty($config->get('disable_paste_word'))) {
      $setting['editorSettings']['pasteFromWordPromptCleanup'] = FALSE;
    }
  }
}

/**
 * Implements hook_user_format_name_alter().
 */
function dyniva_core_user_format_name_alter(&$name, $account) {
  if($account instanceof \Drupal\user\Entity\User && isset($account->full_name)) {
    if($account->get('full_name')->value)
      $name = $account->get('full_name')->value;
  }
}

function dyniva_core_node_form_validate(array &$form, FormStateInterface $form_state) {
  if(\Drupal::currentUser()->hasPermission('administer site configuration')) return;
  $path = $form_state->getValue('path');
  if(!empty($path[0]['alias'])) {
    $alias = $path[0]['alias'];
    $denyPaths = ['/admin', '/admin/', '/manage', '/manage/'];
    foreach($denyPaths as $denyPath) {
      if(strpos($alias, $denyPath) === 0) {
        $form_state->setErrorByName('path', new \Drupal\Core\StringTranslation\TranslatableMarkup('URL alias cannot start with admin/, manage/'));
      }
    }
  }
}

/**
 * 修复block content新增vid内容，不会自动更新到前台的问题
 */
function _dyniva_core_block_content_form_submit(&$form, $form_state) {
  $values = $form_state->getValues();
  if(empty($values['id'])) return;
  $block_content = \Drupal::service('entity.manager')->getStorage('block_content')->load($values['id']);
  if(!$block_content) return;
  $blocks = \Drupal::entityTypeManager()->getStorage('block')->loadByProperties(['plugin' => 'block_content:'.$block_content->uuid()]);
  foreach($blocks as $block) {
    $settings = $block->get('settings');
    if($block_content->revision_id->value != $settings['vid']) {
      $settings['vid'] = $block_content->revision_id->value;
      $block->set('settings', $settings);
      $block->save();
    }
  }
}
